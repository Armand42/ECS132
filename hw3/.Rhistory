colnames(original_data) <- c("id1", "id2", "nummsgs")
# select rows where id1 < id2 to remove duplicate data, keeping only cols 1 and 2
dnc <- original_data[original_data$id1 < original_data$id2, c(1,2)]
# create empty vector of 0s; get degrees by counting num occurences of each val
degrees <- rep(0, nrow(dnc))
for (i in 1:nrow(dnc)) {
degrees[dnc[i, "id1"]] <- degrees[dnc[i, "id1"]] + 1
degrees[dnc[i, "id2"]] <- degrees[dnc[i, "id2"]] + 1
}
# get max degree, to know what i goes up to
max_degree <- max(degrees)
# mi is count of recipients having degree i
mi <- rep(0, max_degree)
for (i in 1:nrow(filter_data)) {
# for non zero degrees
if (degrees[i] != 0) {
# increment its count
mi[degrees[i]] <- mi[degrees[i]] + 1
}
}
# since calling log on 0 returns -Inf, we replace 0s with NA
for (i in 1:length(mi)) {
if (mi[i] == 0)
mi[i] <- NA
}
i <- c(1:max_degree)
log_i <- log(i)
log_mi <- log(mi)
lmresult <- lm(log(i) ~ lmi, na.action=na.exclude)
lmresult
lm(log_i ~ log_mi)
plot(log_i, log_mi)
abline(lm(log_i ~ log_mi))
library(plyr)
# get data, skip header row
original_data <- read.table("./dnc-corecipient/out.dnc-corecipient", skip=1)
# rename cols 1 and 2
colnames(original_data) <- c("id1", "id2", "nummsgs")
# select rows where id1 < id2 to remove duplicate data, keeping only cols 1 and 2
dnc <- original_data[original_data$id1 < original_data$id2, c(1,2)]
# create empty vector of 0s; get degrees by counting num occurences of each val
degrees <- rep(0, nrow(dnc))
for (i in 1:nrow(dnc)) {
degrees[dnc[i, "id1"]] <- degrees[dnc[i, "id1"]] + 1
degrees[dnc[i, "id2"]] <- degrees[dnc[i, "id2"]] + 1
}
# get max degree, to know what i goes up to
max_degree <- max(degrees)
# mi is count of recipients having degree i
mi <- rep(0, max_degree)
for (i in 1:nrow(filter_data)) {
# for non zero degrees
if (degrees[i] != 0) {
# increment its count
mi[degrees[i]] <- mi[degrees[i]] + 1
}
}
# since calling log on 0 returns -Inf, we replace 0s with NA
for (i in 1:length(mi)) {
if (mi[i] == 0)
mi[i] <- NA
}
i <- c(1:max_degree)
log_i <- log(i)
log_mi <- log(mi)
lmresult <- lm(log_i ~ log_mi, na.action=na.exclude)
lmresult
lm(log_i ~ log_mi)
plot(log_i, log_mi)
abline(lm(log_i ~ log_mi))
library(plyr)
# get data, skip header row
original_data <- read.table("./dnc-corecipient/out.dnc-corecipient", skip=1)
# rename cols 1 and 2
colnames(original_data) <- c("id1", "id2", "nummsgs")
# select rows where id1 < id2 to remove duplicate data, keeping only cols 1 and 2
dnc <- original_data[original_data$id1 < original_data$id2, c(1,2)]
# create empty vector of 0s; get degrees by counting num occurences of each val
degrees <- rep(0, nrow(dnc))
for (i in 1:nrow(dnc)) {
degrees[dnc[i, "id1"]] <- degrees[dnc[i, "id1"]] + 1
degrees[dnc[i, "id2"]] <- degrees[dnc[i, "id2"]] + 1
}
# get max degree, to know what i goes up to
max_degree <- max(degrees)
# mi is count of recipients having degree i
mi <- rep(0, max_degree)
for (i in 1:nrow(filter_data)) {
# for non zero degrees
if (degrees[i] != 0) {
# increment its count
mi[degrees[i]] <- mi[degrees[i]] + 1
}
}
# since calling log on 0 returns -Inf, we replace 0s with NA so plot will ignore the NA vals
for (i in 1:length(mi)) {
if (mi[i] == 0)
mi[i] <- NA
}
i <- c(1:max_degree)
log_i <- log(i)
log_mi <- log(mi)
lm_res <- lm(log_i ~ log_mi)
coeff(lm_res)
library(plyr)
# get data, skip header row
original_data <- read.table("./dnc-corecipient/out.dnc-corecipient", skip=1)
# rename cols 1 and 2
colnames(original_data) <- c("id1", "id2", "nummsgs")
# select rows where id1 < id2 to remove duplicate data, keeping only cols 1 and 2
dnc <- original_data[original_data$id1 < original_data$id2, c(1,2)]
# create empty vector of 0s; get degrees by counting num occurences of each val
degrees <- rep(0, nrow(dnc))
for (i in 1:nrow(dnc)) {
degrees[dnc[i, "id1"]] <- degrees[dnc[i, "id1"]] + 1
degrees[dnc[i, "id2"]] <- degrees[dnc[i, "id2"]] + 1
}
# get max degree, to know what i goes up to
max_degree <- max(degrees)
# mi is count of recipients having degree i
mi <- rep(0, max_degree)
for (i in 1:nrow(filter_data)) {
# for non zero degrees
if (degrees[i] != 0) {
# increment its count
mi[degrees[i]] <- mi[degrees[i]] + 1
}
}
# since calling log on 0 returns -Inf, we replace 0s with NA so plot will ignore the NA vals
for (i in 1:length(mi)) {
if (mi[i] == 0)
mi[i] <- NA
}
i <- c(1:max_degree)
log_i <- log(i)
log_mi <- log(mi)
lm_res <- lm(log_i ~ log_mi)
coef(lm_res)
plot(log_i, log_mi)
abline(lm(log_i ~ log_mi))
library(plyr)
# get data, skip header row
original_data <- read.table("./dnc-corecipient/out.dnc-corecipient", skip=1)
# rename cols 1 and 2
colnames(original_data) <- c("id1", "id2", "nummsgs")
# select rows where id1 < id2 to remove duplicate data, keeping only cols 1 and 2
dnc <- original_data[original_data$id1 < original_data$id2, c(1,2)]
# create empty vector of 0s; get degrees by counting num occurences of each val
degrees <- rep(0, nrow(dnc))
for (i in 1:nrow(dnc)) {
degrees[dnc[i, "id1"]] <- degrees[dnc[i, "id1"]] + 1
degrees[dnc[i, "id2"]] <- degrees[dnc[i, "id2"]] + 1
}
# get max degree, to know what i goes up to
max_degree <- max(degrees)
# mi is count of recipients having degree i
mi <- rep(0, max_degree)
for (i in 1:nrow(filter_data)) {
# for non zero degrees
if (degrees[i] != 0) {
# increment its count
mi[degrees[i]] <- mi[degrees[i]] + 1
}
}
# since calling log on 0 returns -Inf, we replace 0s with NA so plot will ignore the NA vals
for (i in 1:length(mi)) {
if (mi[i] == 0)
mi[i] <- NA
}
i <- c(1:max_degree)
log_i <- log(i)
log_mi <- log(mi)
lm(log_i ~ log_mi)
plot(log_i, log_mi)
abline(lm(log_i ~ log_mi))
library(plyr)
# get data, skip header row
original_data <- read.table("./dnc-corecipient/out.dnc-corecipient", skip=1)
# rename cols 1 and 2
colnames(original_data) <- c("id1", "id2", "nummsgs")
# select rows where id1 < id2 to remove duplicate data, keeping only cols 1 and 2
dnc <- original_data[original_data$id1 < original_data$id2, c(1,2)]
# create empty vector of 0s; get degrees by counting num occurences of each val
degrees <- rep(0, nrow(dnc))
for (i in 1:nrow(dnc)) {
degrees[dnc[i, "id1"]] <- degrees[dnc[i, "id1"]] + 1
degrees[dnc[i, "id2"]] <- degrees[dnc[i, "id2"]] + 1
}
# get max degree, to know what i goes up to
max_degree <- max(degrees)
# mi is count of recipients having degree i
mi <- rep(0, max_degree)
for (i in 1:nrow(filter_data)) {
# for non zero degrees
if (degrees[i] != 0) {
# increment its count
mi[degrees[i]] <- mi[degrees[i]] + 1
}
}
# since calling log on 0 returns -Inf, we replace 0s with NA so plot will ignore the NA vals
for (i in 1:length(mi)) {
if (mi[i] == 0)
mi[i] <- NA
}
i <- c(1:max_degree)
log_i <- log(i)
log_mi <- log(mi)
lm(log_mi ~ log_i)
plot(log_i, log_mi)
# abline(lm(log_i ~ log_mi))
library(plyr)
# get data, skip header row
original_data <- read.table("./dnc-corecipient/out.dnc-corecipient", skip=1)
# rename cols 1 and 2
colnames(original_data) <- c("id1", "id2", "nummsgs")
# select rows where id1 < id2 to remove duplicate data, keeping only cols 1 and 2
dnc <- original_data[original_data$id1 < original_data$id2, c(1,2)]
# create empty vector of 0s; get degrees by counting num occurences of each val
degrees <- rep(0, nrow(dnc))
for (i in 1:nrow(dnc)) {
degrees[dnc[i, "id1"]] <- degrees[dnc[i, "id1"]] + 1
degrees[dnc[i, "id2"]] <- degrees[dnc[i, "id2"]] + 1
}
# get max degree, to know what i goes up to
max_degree <- max(degrees)
# mi is count of recipients having degree i
mi <- rep(0, max_degree)
for (i in 1:nrow(filter_data)) {
# for non zero degrees
if (degrees[i] != 0) {
# increment its count
mi[degrees[i]] <- mi[degrees[i]] + 1
}
}
# since calling log on 0 returns -Inf, we replace 0s with NA so plot will ignore the NA vals
for (i in 1:length(mi)) {
if (mi[i] == 0)
mi[i] <- NA
}
i <- c(1:max_degree)
log_i <- log(i)
log_mi <- log(mi)
# lm(log_i ~ log_mi)
# plot(log_i, log_mi)
# abline(lm(log_i ~ log_mi))
lm(log_mi ~ log_i)
plot(log_mi, log_i)
abline(lm(log_mi ~ log_i))
library(plyr)
# get data, skip header row
original_data <- read.table("./dnc-corecipient/out.dnc-corecipient", skip=1)
# rename cols 1 and 2
colnames(original_data) <- c("id1", "id2", "nummsgs")
# select rows where id1 < id2 to remove duplicate data, keeping only cols 1 and 2
dnc <- original_data[original_data$id1 < original_data$id2, c(1,2)]
# create empty vector of 0s; get degrees by counting num occurences of each val
degrees <- rep(0, nrow(dnc))
for (i in 1:nrow(dnc)) {
degrees[dnc[i, "id1"]] <- degrees[dnc[i, "id1"]] + 1
degrees[dnc[i, "id2"]] <- degrees[dnc[i, "id2"]] + 1
}
# get max degree, to know what i goes up to
max_degree <- max(degrees)
# mi is count of recipients having degree i
mi <- rep(0, max_degree)
for (i in 1:nrow(filter_data)) {
# for non zero degrees
if (degrees[i] != 0) {
# increment its count
mi[degrees[i]] <- mi[degrees[i]] + 1
}
}
# since calling log on 0 returns -Inf, we replace 0s with NA so plot will ignore the NA vals
for (i in 1:length(mi)) {
if (mi[i] == 0)
mi[i] <- NA
}
i <- c(1:max_degree)
log_i <- log(i)
log_mi <- log(mi)
lm(log_i ~ log_mi)
plot(log_i, log_mi)
abline(lm(log_i ~ log_mi))
library(plyr)
# get data, skip header row
original_data <- read.table("./dnc-corecipient/out.dnc-corecipient", skip=1)
# rename cols 1 and 2
colnames(original_data) <- c("id1", "id2", "nummsgs")
# select rows where id1 < id2 to remove duplicate data, keeping only cols 1 and 2
dnc <- original_data[original_data$id1 < original_data$id2, c(1,2)]
# create empty vector of 0s; get degrees by counting num occurences of each val
degrees <- rep(0, nrow(dnc))
for (i in 1:nrow(dnc)) {
degrees[dnc[i, "id1"]] <- degrees[dnc[i, "id1"]] + 1
degrees[dnc[i, "id2"]] <- degrees[dnc[i, "id2"]] + 1
}
# get max degree, to know what i goes up to
max_degree <- max(degrees)
# mi is count of recipients having degree i
mi <- rep(0, max_degree)
for (i in 1:nrow(filter_data)) {
# for non zero degrees
if (degrees[i] != 0) {
# increment its count
mi[degrees[i]] <- mi[degrees[i]] + 1
}
}
# since calling log on 0 returns -Inf, we replace 0s with NA so plot will ignore the NA vals
for (i in 1:length(mi)) {
if (mi[i] == 0)
mi[i] <- NA
}
i <- c(1:max_degree)
log_i <- log(i)
log_mi <- log(mi)
lm(log_i ~ log_mi)
plot(log_i, log_mi)
abline(lm(log_i ~ log_mi))
summary(lm(log_i ~ log_mi))
source('~/notes/s19/ECS132/hw3/Code.R')
source('~/notes/s19/ECS132/hw3/Code.R')
sim1(10000)
source('~/notes/s19/ECS132/hw3/Code.R')
sim1(10000)
qbinom(0.5, 1000)
qbinom(0.5, 1000, 0.1)
qbinom(0.5, 1000, 0.1)
source('~/notes/s19/ECS132/hw3/Code.R')
source('~/notes/s19/ECS132/hw3/Code.R')
raccum(1000, 2)
q
raccum(1000, 5)
q
source('~/notes/s19/ECS132/hw3/Code.R')
raccum(1000, 2)
raccum(1000, 1000)
raccum(1000, 5)
source('~/notes/s19/ECS132/hw3/Code.R')
raccum(1000, 4)
qaccum(4, 4)
source('~/notes/s19/ECS132/hw3/Code.R')
qaccum(4, 4)
source('~/notes/s19/ECS132/hw3/Code.R')
qaccum(4,4)
raccum(2, 12)
source('~/notes/s19/ECS132/hw3/Code.R')
raccum(100, 5)
source('~/notes/s19/ECS132/hw3/Code.R')
source('~/notes/s19/ECS132/hw3/Code.R')
raccum(100, 5)
source('~/notes/s19/ECS132/hw3/Code.R')
raccum(100, 5)
q
daccum(1, 20)
daccum(1, 20)
daccum(1, 2)
daccum(2, 12)
daccum(5, 10)
daccum(2, 24)
paccum(5, 5)
paccum(10, 5)
paccum(12, 5)
paccum(1, 5)
paccum(1, 10)
paccum(2, 10)
paccum(3, 10)
ceiling(5/12):ceiling(5/2)
raccum(100, 5)
source('~/notes/s19/ECS132/hw3/Code.R')
raccum(100, 5)
rgeom(100, 0.2)
raccum(100, 5)
source('~/notes/s19/ECS132/hw3/Code.R')
raccum(100, 5)
dgeom(5, 0.2)
rgeom(5, 0.2)
source('~/notes/s19/ECS132/hw3/Code.R')
raccum(100, 10)
source('~/notes/s19/ECS132/hw3/Code.R')
sim1(10)
sim1(100)
N <- rgeom(100, 0.2)
N
N <- N+1
N
source('~/notes/s19/ECS132/hw3/Code.R')
source('~/notes/s19/ECS132/hw3/Code.R')
1/0.15
(17.14228235171777 + 26.031171240606657) - ((5.448954957930762 + 1.115621624597426) * (6.666667))
1/0.15
5.45+1.11
6.56*6.66
17+26
(17.14228235171777 + 26.031171240606657) - ((5.448954957930762 + 1.115621624597426) * (6.666667))
(17.14228235171777 + 26.031171240606657) - ((5.448954957930762 + 1.115621624597426) * (6.666667))
source('~/notes/s19/ECS132/hw3/Code.R')
plotc
plotC
source('~/notes/s19/ECS132/hw3/Code.R')
source('~/notes/s19/ECS132/hw3/Code.R')
library(plyr)
# get data, skip header row
original_data <- read.table("./dnc-corecipient/out.dnc-corecipient", skip=1)
# rename cols 1 and 2
colnames(original_data) <- c("id1", "id2", "nummsgs")
# select rows where id1 < id2 to remove duplicate data, keeping only cols 1 and 2
dnc <- original_data[original_data$id1 < original_data$id2, c(1,2)]
# create empty vector of 0s; get degrees by counting num occurences of each val
degrees <- rep(0, nrow(dnc))
for (i in 1:nrow(dnc)) {
degrees[dnc[i, "id1"]] <- degrees[dnc[i, "id1"]] + 1
degrees[dnc[i, "id2"]] <- degrees[dnc[i, "id2"]] + 1
}
# get max degree, to know what i goes up to
max_degree <- max(degrees)
# mi is count of recipients having degree i
mi <- rep(0, max_degree)
for (i in 1:nrow(dnc)) {
# for non zero degrees
if (degrees[i] != 0) {
# increment its count
mi[degrees[i]] <- mi[degrees[i]] + 1
}
}
# since calling log on 0 returns -Inf, we replace 0s with NA so plot will ignore the NA vals
for (i in 1:length(mi)) {
if (mi[i] == 0)
mi[i] <- NA
}
# i goes from 1 to max degree
i <- c(1:max_degree)
# apply log to i and mi
log_i <- log(i)
log_mi <- log(mi)
# apply linear model function and plot
lm(log_i ~ log_mi)
plot(log_i, log_mi)
abline(lm(log_i ~ log_mi))
summary(lm(log_i ~ log_mi))
library(plyr)
# get data, skip header row
original_data <- read.table("./dnc-corecipient/out.dnc-corecipient", skip=1)
# rename cols 1 and 2
colnames(original_data) <- c("id1", "id2", "nummsgs")
# select rows where id1 < id2 to remove duplicate data, keeping only cols 1 and 2
dnc <- original_data[original_data$id1 < original_data$id2, c(1,2)]
# create empty vector of 0s; get degrees by counting num occurences of each val
degrees <- rep(0, nrow(dnc))
for (i in 1:nrow(dnc)) {
degrees[dnc[i, "id1"]] <- degrees[dnc[i, "id1"]] + 1
degrees[dnc[i, "id2"]] <- degrees[dnc[i, "id2"]] + 1
}
# get max degree, to know what i goes up to
max_degree <- max(degrees)
# mi is count of recipients having degree i
mi <- rep(0, max_degree)
for (i in 1:nrow(dnc)) {
# increment its count
mi[degrees[i]] <- mi[degrees[i]] + 1
}
# since calling log on 0 returns -Inf, we replace 0s with NA so plot will ignore the NA vals
for (i in 1:length(mi)) {
if (mi[i] == 0)
mi[i] <- NA
}
# i goes from 1 to max degree
i <- c(1:max_degree)
# apply log to i and mi
log_i <- log(i)
log_mi <- log(mi)
# apply linear model function and plot
lm(log_i ~ log_mi)
plot(log_i, log_mi)
abline(lm(log_i ~ log_mi))
summary(lm(log_i ~ log_mi))
library(plyr)
# get data, skip header row
original_data <- read.table("./dnc-corecipient/out.dnc-corecipient", skip=1)
# rename cols 1 and 2
colnames(original_data) <- c("id1", "id2", "nummsgs")
# select rows where id1 < id2 to remove duplicate data, keeping only cols 1 and 2
dnc <- original_data[original_data$id1 < original_data$id2, c(1,2)]
# create empty vector of 0s; get degrees by counting num occurences of each val
degrees <- rep(0, nrow(dnc))
for (i in 1:nrow(dnc)) {
degrees[dnc[i, "id1"]] <- degrees[dnc[i, "id1"]] + 1
degrees[dnc[i, "id2"]] <- degrees[dnc[i, "id2"]] + 1
}
# get max degree, to know what i goes up to
max_degree <- max(degrees)
# mi is count of recipients having degree i
mi <- rep(0, max_degree)
for (i in 1:nrow(dnc)) {
# increment its count
mi[degrees[i]] <- mi[degrees[i]] + 1
}
mi
# since calling log on 0 returns -Inf, we replace 0s with NA so plot will ignore the NA vals
for (i in 1:length(mi)) {
if (mi[i] == 0)
mi[i] <- NA
}
# i goes from 1 to max degree
i <- c(1:max_degree)
# apply log to i and mi
log_i <- log(i)
log_mi <- log(mi)
# apply linear model function and plot
lm(log_i ~ log_mi)
plot(log_i, log_mi)
abline(lm(log_i ~ log_mi))
summary(lm(log_i ~ log_mi))
